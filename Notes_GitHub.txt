GitHub Notes:

To clone a remote repository (repo) onto a local repository (my computer):
  1. Copy the web URL for the remote repo you want (using 'Clone or Download' button under '<> Code' tab on GitHub account)
  2. On local machine, navigate to desired location for Local Repo; then type:
	>git clone insert_copied/web/URL_here

To determine which repo BRANCH you are currently using:
	>git status	**NOTE: must be in a directory containing a cloned repository (a Local Repo).

To create a new directory within the Local Repo:
	>mkdir new_directory_name	**NOTE: must be in the Local Repo (current wd) -OR- specify path to the Local Repo.

Committing changes to a Remote Repo from a Local Repo is a 3-step process:
  1. MARK FOR COMMITTING (files or directory)
	>git add .	**NOTE: using '.' marks everything in the working directory (wd) that has not been committed.
	or
	>git add \Path\

	ASIDE: using >git status AFTER applying 'git add' will show all files newly marked for committing.

  2. COMMIT CHANGES (commits all files currently marked)
	>git commit -m "insert message here...a msg is always required"		**NOTE: -m stands for message.

	ASIDE: using 'git status' AFTER 'git commit' will show the Local Repo is AHEAD of ORIGIN.
	
	2nd ASIDE:  if "Tell me who you are," then do:
		>git config user.email "insert.email@email.com"
		>git config user.name "any name you want"

  3. PUSH TO REMOTE REPO (publish our changes to GitHub)
	>git push <name for remote repo <remote repo branch>	**NOTE: this command will update the Remote Repo with the new commits that were executed on Local Repo.
	>git push origin master


To bring changes from Remote Repo to Local Repo:
	>git pull.......


Sync changes made in remote repo branch TO local repo branch:
	1. On local client, navigate to dir where local branch will be stored.
		% cd Path/to/local\ branch						** '\' means IGNORE the next character;

	2. Initialize git connection (on windows: open Git Bash & then initialize).
		% git init

	3. Connect to remote repo.
		% git remote add <name for remote repo> <remote repo URL>

	4. Pull from remote repo branch & merge into local branch.
		% git pull <name for remote repo> <remote repo branch>
		% git pull origin master						** example 'git pull' where 'origin' is <name for remote repo>
											   and 'master' is the remote branch being pulled into local branch;


Adding files from local (repo) branch to EXISTING remote (repo) branch:


	1. 'cd' into target directory via Terminal on local client.
	2. (re-)Initialize existing local Git repo:
		% git init
	
	3. Check for changes in tracked files & directories:
		% git status					** may need to 'cd' in subdirectories;

	4. 'add' files and/or directories that have changed:
		% git add					** this is for files/dirs that have NOT been staged or committed;

	5. 'Commit' the files that are staged in local branch:
		% git commit -m "A message must go here"	** '-m' is a flag that forces a message to be included with the commit;
								** 'commit' will commit the tracked changes to local repo & prepare them to be pushed to a Remote repo;

	6. COPY remote repo URL:
		On the Remote Repo's "<Code>" tab, click the CLONE button to copy;
		** the correct URL ends in '.git';

	7. Set push destination:				
		% git remote add origin <remote repo URL>	** Verifies the name of the target (remote) repo & its URL;
		% git remote -v					** Sets the remote repo URL as #NameOfRemoteRepo;

 	8. PUSH & SET remote branch (aka 'origin') as UPSTREAM branch for current branch master (master):
		% git push -u origin master			** '-u' is equivalent to '--set-upstream' **
 

Adding files from Local repo (aka Local Client) to a NEW remote repo (aka GitHub Repository)

	1. Create remote repo on GitHub.
	2. On local client, open Terminal.

  		2(a) FOR WINDOWS:  Launch Git Bash (from directory containing git-bash.exe)
			>start c:\Program Files\Git\git-bash.exe				** Git Bash runs in LINUX **		

	3. Change current working dir to local project (aka local dir);
	4. Initialize local dir as a Git repo (this makes it a LOCAL REPO):
		% git init

	5. Clone the remote repo
		% git clone <remote repo URL>			** this becomes new Local repo branch;

	5. CD into local repo & 'Add' the files in the current wd:
		% git add .					** '.' just specifies the current dir; could specify path to any dir or files you want;
								** 'add' marks the files as local repo files, and stages them for committing;

	6. 'Commit' the files that are staged in local repo:
		% git commit -m "A message must go here"	** '-m' is a flag that forces a message to be included with the commit;
								** 'commit' will commit the tracked changes to local repo & prepare them to be pushed to a Remote repo;

	7. COPY remote repo URL:
		On the Remote Repo's "<Code>" tab, click the CLONE button to copy;
		** the correct URL ends in '.git';

	8. Set & verify the Remote repo URL:
		% git remote add origin <remote repo URL>	** Sets the remote repo URL as the ORIGIN;
		% git remote -v					** Verifies the remote repo URL;

	   8(a) To set an EXISTING REPO:
		% git remote add #NameOfRemoteRepo <remote repo URL>	** Sets the remote repo URL as #NameOfRemoteRepo;
		% git remote -v						** Verifies the name of the target (remote) repo & its URL;


	9. 'Push' the changes in local branch TO remote branch (GitHub):
		% git push origin master			** Pushes the changes in local branch TO the remote branch specified as the Origin


Disconnect local repo branch from Remote master:
	% git remote rm origin					** 'rm' can be replaced w/ 'remove'; and 'origin' can be replaced by local branch name;
	% rm -rf path/to/local_repo/.git



Other useful Git commands:
	% git status
	% git branch 
	% git branch -r
	% git push -u origin master
	% git rm --cached <file>...			** to un-stage a file (ie. undo a 'git add' command;
		% git rm -f --cached <file>...		** uses '-f' to force Git to un-stage the file;
