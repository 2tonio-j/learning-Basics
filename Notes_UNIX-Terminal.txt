

Shutdown computer:
	(Local)
	% shutdown -h now			** halts processes and shuts down local computer immediately; no warning msgs;
	% shutdown -h +MM			** shuts down local computer after +MM minutes;
	% shutdown -h YYMMDDHH:MM		** specifies a DTG for local computer shutdown; warning msgs provided;
	% shutdown -r now			** reboot local computer after immediate shutdown;


Open terminal:
	CMD + Space Bar; begin typing 'Terminal';

Close terminal:
	CMD + Q

Open NEW terminal window (a new tab) from command line:
	open -a terminal /path/to/whatever	** Opens new terminal tab at specified directory;
	CNTRL + N				** Opens new terminal tab at home directory;

Check system memory:
	% df -h


List directory contents:
	% ls
		-G	colors directories;
		-S	sorts by size;
		-p	places / at end of each subdirectory;
		-t	sorts by last modified;

Check current version of:
	NPM:		npm --v		OR wpm -version
	Jekyll:		jekyll --v  	OR jekyll -version
	Node js:	node --v  	OR node -version
	Bootstrap:	

Create new directories:
	% mkdir path/to/new/dir	


Create multiple new directories:
	% mkdir -p (main dir loc)/{Pattern1,Pattern2,Pattern...}	** '-p' flag tells mkdir cmd to create main directory first, if it does not exist yet;
												targets listed with {} comprise BRACE EXPANSION LIST;
	% mkdir -p htg/{Articles,Images,Note,Done}			** Example: 'htg' is the MAIN DIRECTORY and 'Article,Images,Note,Done' are the new
												subdirectories being created.

Create multiple new directories, CONTAINING subdirectories:

	% mkdir -p (main dir)/{Pattern1/{pattern3,pattern4},Pattern2}	** use NESTED Brace Expansion Lists to create subdirectories within newly created directories;
	% mkdir -p htg/{articles/{new,rewrites},images,notes,done}	** Example: '/{...}' nested within brace expansion list will specify subdirectories to be created.


Find files:
	% find (starting dir) (matching criteria and actions)		** This is the general form;
	% find . -name 'pattern' -print					** pseudo example: '.' is current directory;
											   	Replace 'pattern' with filename or expression (keep the ' ');
											   	Keep the -name and -print switches;

	% find ~/ -name '*Terminal.rtf' -print				** Ex/ how to find this document in the; 
												'~/' specifies the Home directory;
												     ( NOTE: '/' specifies the Root directory );
												'*' specifies all files containing the pattern 'Terminal.rtf'

	% find where-to-look criteria action 2>/dev/null		** The ' 2>/dev/null' will filter out all error messages created by find command;
												The error messages (aka FD #2) are redirected to /dev/null;
												Items in the /dev/null directory get discarded by the system;

	% find /path/to/dir -name "search-pattern"  2>&1 | grep -v "Permission denied"		** Excludes all “permission denied” messages from “find” command
	% find /path/to/dir -iname "search-pattern" 2>&1 | grep -v "Operation not permitted"		'-iname' means search pattern is NOT case-sensitive


	% find /path/to/dir -iname "search-pattern" 2>&1 | grep -v "Permission denied\|Operation not permitted" 
		...PRODUCES SIMILAR RESULTS AS...
	% find where-to-look criteria action 2>/dev/null


	% find /path/to/dir -name "search-pattern"  2>&1 | grep -v "Permission denied" > output-file	** Stores output in the output-file (ex/ output.txt);
	% cat output-file										** This command lets you view the output-file;


Search for multiple words in single line:
	% grep 'word1\|word2\|word3' /path/to/file			** remember, '\' in UNIX/LINUX means IGNORE the NEXT character;			
	% grep 'word*' *.txt						** Search all text files;
	% grep 'wordA*'\''wordB' *.py					** Search all python files for 'wordA' or 'wordB'
	
	% grep -E 'word1|word2' *.doc
	% grep -e string1 -e string2 *.pl
	% egrep "word1|word2" *.c					** my PREFERRED METHOD for multi-word searches;

	% grep -v 'bar\|foo' /dir1/dir2/file1				** Show all the lines that do not match given pattern/words/strings
	% egrep -v 'pattern1|pattern2' /path/to/file


Check (Test) if a file exists:
	% [[ -f ./MyFiles/ZX600P7F.pdf ]] && echo "Found the file you wanted"

		[[ <expression> ]] is syntax for 'test <an expression>'
		'.' specifies current directory;
		'-f' checks if target exists (must be a regular file);
		'-e' also checks if target exists (can be a directory OR file);
		'&& echo' returns (outputs) whatever comes next;


Display, Create, or Modify text files from Terminal:
	'cat' <concatenate> command

	% cat filename  OR  cat path/to/file		** View the text file;
	
	% cat > filename				** Stores submitted input in the specified file;
	  [CNTL+D to exit]						'>' tells system that whatever is typed next gets stored in the file;
									Press [CNTL+D] to stop storing input.

	% cat bigfile | more  OR  more bigfile		** Use to display more of a large file (fills more than entire screen);
	% cat bigfile | less  OR  less bigfile		** Use to display less of a large file (fills more than entire screen);

	% cat score1.txt teams.txt > report.txt		** Combine 2 or more files & create a new file;

	% cat >>filename				** Append (add data to existing file) WITHOUT opening the file;
	  [CNTL+D to exit]						Only lets you ADD TO the file; must open the file to delete or modify;
									Press [CNTL+D] to stop storing input.
									
	% cat -n filename  OR				** Will number all output lines;	
	% cat --number filename


	% cat filename | command			

	% cat filename | grep something



Display list of all running processes:
	% ps auxc					** Returns active PIDs by User and Command;
	% ps axc | grep -i <app name>			** Returns the PID(s) and Command(s) associated w/ target app (-i means ignore character casing);

	% ps axe | egrep -i 'pattern1|pattern2'		** use 'egrep' to search for multiple words (patterns);

	OR

	% top -o pid					** lists active processes by PID in decreasing order


Find Process ID for running processes:
	% pgrep
		-n select only the newest (most recently-started) processes that match criteria
		-o select only the oldest (least recently-started) processes that match criteria
		-x require an exact match of the process name


Open an Application:
	% open '/Path/To My/File.ext'


Open Chrome & Restore last session:\
	% open /Applications/Google Chrome.app --args --restore-last-session


Close Chrome "correctly" (to enable last-session restore):
	%pkill -a -i 'Google Chrome'


Stop a process (or application):
	% kill -9 <PID>
	
	OR
	
	% pkill -SIG <process name>			** 'SIG' is placeholder for SIGNAL; use 9 to kill a process;
	% pkill -9 'Microsoft Word'
	% pkill -9 -i microsoft\ word			** '\' IGNORES the next character (a space in this case);
	% pkill -9 -i 'process\ 1|process2|etc..'	** '-i' IGNORES letter case for specified pattern (word pattern; ex/ Microsoft Word);
							** pipe (|) lets us list multiple process names; NO SPACE before OR after pipe (sys will think its an arg);


Move file(s) into a directory:
	% mv file1.ext directory
	% mv old_name.ext new_name.ext
	% mv old_name.ext directory/new_name.ext
	% mv file1.txt file.2.txt file3.txt directory
	% mv *.txt directory


Move directories:
	% mv dir1 /New/Path/To/dir1


Copy directories:
	% cp -R <source_folder> <destination_folder>


Create a NEW (blank) text file from terminal:
	1. Navigate to target directory
		% touch MyFile.txt			** Replace 'MyFile' with text file name and keep .txt extension;

**********************************************
Exit Git's Per-user configuration file
	% shift+z, shift+z  (capital Z twice)


**********************************************
FOR-Loops in BASH:
	% for <name> [[ in [ word \'85 ] ] ; ] do cmd ; done
	
	Ex/ % for i in 'seq 1 10'; do echo $i; done



Find all Applications (.app) on the computer:
	% sudo find / -iname *.app > ~/Desktop/EveryMacDotApp.txt
							
						** ' > ~/Desktop..' directs the output from the search to a target location, which is a .txt file in this case;


**********************************************
Activate Auto-complete for UNIX (Mac):
	1. Enter command:
		% sudo nano ~/.inputrc

	2. Next, enter p/w when prompted.
	3. Taken to Nano editor to write; .inputrc is a configuration file containing customizable terminal variables.
	4. In Nano, enter following cmds:
		set completion-ignore-case on
		set show-all-if-ambiguous on
		TAB: menu-complete
	5. Press CTRL + o to save;
	6. Press Return;
	7. Press CTRL + x to exit;
	8. Exit current terminal session (CMD + Q) & restart Terminal.

	** Must use PROPER LETTER CASING for auto-complete to work **


**********************************************
For NVM (Node Version Manager):

	1. To install or update nvm, use the following cURL:
		%curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash

	2. Remove modules from the system Node as follows:
		% nvm use system
		% npm uninstall -g a_module

	3. Load NVM
		i. Close and reopen your terminal to start using nvm;
		ii. Run the following code:
			% export NVM_DIR="$HOME/.nvm"
			% [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm;
		
	4. Verify NVM was properly installed
		% nvm --version


**********************************************
Install Node.js (& npm) via NVM:
	1. Install the latest Node.js LTS (Long-Term Support) version:
		% nvm install --lts

	2. To use Node.js LTS:
		% nvm use --lts

**********************************************
Install Browser-sync:
	% npm i -g browser-sync		** equivalent to:  % npm install -g browser-synce **


	Verify installation/Check version:
	% browser-sync --version


**********************************************
Setting up Jekyll as Static Site Generator (SSG):

After installing Node.js,...
Navigate to the root /bootstrap directory and run npm install to install our local dependencies;
	% cd .../node_modules/bootstrap
	% npm install 

install Jekyll (a static site generator) with 'gem install jekyll bundler';
	% sudo gem install jekyll bundler

Navigate to desired working directory (where webpage doc is stored);
	% cd <path/to/target/directory>

generate a Gemfile with bundle init;
	% bundle init

add project’s dependencies using bundle add command < !! only do this step once (for initial setup) or you'll get a version error !! >
	% sudo bundle add jekyll

**********************************************
Running Static Site Generator using Jekyll:

serve your project to localhost:4000
	% bundle exec jekyll serve		** jekyll commands begin with 'bundle exec';
						** exit site serve mode using CTRL+C;

